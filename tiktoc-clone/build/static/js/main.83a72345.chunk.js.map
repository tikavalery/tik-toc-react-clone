{"version":3,"sources":["axios.js","VideoFooter.js","VideoSidebar.js","Video.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","VideoFooter","channel","description","song","className","mode","index","src","alt","VideoSidebar","likes","shares","messages","useState","liked","setLiked","fontSize","onClick","e","Video","url","playing","setPlaying","videoRef","useRef","loop","ref","current","pause","play","onKeyDown","console","log","type","App","videos","setVideos","useEffect","a","Axios","get","response","data","fetchPosts","map","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.83a72345.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n  baseURL: \"https://tiktoc-clone.herokuapp.com/\",\r\n});\r\n\r\nexport default instance;\r\n","import React from \"react\";\r\nimport \"./VideoFooter.css\";\r\nimport MusicNoteIcon from \"@material-ui/icons/MusicNote\";\r\nimport Ticker from \"react-ticker\";\r\n\r\nfunction VideoFooter({ channel, description, song }) {\r\n  return (\r\n    <div className=\"videoFooter\">\r\n      <div className=\"videoFooter__text\">\r\n        <h3>@{channel}</h3>\r\n        <p>{description}</p>\r\n        <div className=\"videoFooter__ticker\">\r\n          <MusicNoteIcon className=\"videoFooter__icon\" />\r\n          <Ticker mode=\"smooth\">\r\n            {({ index }) => (\r\n              <>\r\n                <p>{song}</p>\r\n              </>\r\n            )}\r\n          </Ticker>\r\n        </div>\r\n      </div>\r\n      <img\r\n        src=\"https://static.thenounproject.com/png/934821-200.png\"\r\n        alt=\"stipping record images\"\r\n        className=\"videoFooter__record\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\nexport default VideoFooter;\r\n","import React, { useState } from \"react\";\r\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\r\nimport MessageIcon from \"@material-ui/icons/Message\";\r\nimport ShareIcon from \"@material-ui/icons/Share\";\r\nimport FavoriteBorderIcon from \"@material-ui/icons/FavoriteBorder\";\r\nimport \"./VideoSidebar.css\";\r\nfunction VideoSidebar({ likes, shares, messages }) {\r\n  const [liked, setLiked] = useState(false);\r\n\r\n  return (\r\n    <div className=\"videoSidebar\">\r\n      <div className=\"videoSidebar__button\">\r\n        {liked ? (\r\n          <FavoriteIcon fontSize=\"large\" onClick={(e) => setLiked(false)} />\r\n        ) : (\r\n          <FavoriteBorderIcon\r\n            fontSize=\"large\"\r\n            onClick={(e) => setLiked(true)}\r\n          />\r\n        )}\r\n        {/* <FavoriteIcon fontSize=\"large\" onClick={(e) => setLiked(true)} /> */}\r\n        <p>{liked ? likes + 1 : likes}</p>\r\n      </div>\r\n\r\n      <div className=\"videoSidebar__button\">\r\n        <MessageIcon fontSize=\"large\" />\r\n        <p>{messages}</p>\r\n      </div>\r\n\r\n      <div className=\"videoSidebar__button\">\r\n        <ShareIcon fontSize=\"large\" />\r\n        <p>{shares}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default VideoSidebar;\r\n","import React, { useRef, useState } from \"react\";\r\nimport \"./Video.css\";\r\nimport VideoFooter from \"./VideoFooter\";\r\nimport VideoSidebar from \"./VideoSidebar\";\r\n\r\nfunction Video({ url, channel, description, song, likes, messages, shares }) {\r\n  const [playing, setPlaying] = useState(false);\r\n  const videoRef = useRef(null);\r\n\r\n  const handleVideoPress = () => {\r\n    //if the video is playing\r\n    if (playing) {\r\n      videoRef.current.pause();\r\n      setPlaying(false);\r\n    } else {\r\n      videoRef.current.play();\r\n      setPlaying(true);\r\n    }\r\n    //stop it\r\n    //otherwise is not stop it\r\n    //play it\r\n  };\r\n\r\n  const handleVideoMouseDown = () => {\r\n    // if (e.keyCode === 13) {\r\n    console.log(\"down\");\r\n    // }\r\n    //if the video is playing\r\n    // if (playing) {\r\n    //   videoRef.current.pause();\r\n    // }\r\n\r\n    //stop it\r\n    //otherwise is not stop it\r\n    //play it\r\n  };\r\n\r\n  return (\r\n    <div className=\"video\">\r\n      <video\r\n        className=\"video__player\"\r\n        loop\r\n        ref={videoRef}\r\n        onClick={handleVideoPress}\r\n        onKeyDown={handleVideoMouseDown}\r\n      >\r\n        <source src={url} type=\"video/mp4\" />\r\n      </video>\r\n\r\n      {/* video footer */}\r\n      <VideoFooter channel={channel} description={description} song={song} />\r\n      <VideoSidebar likes={likes} shares={shares} messages={messages} />\r\n      {/* video sidebar */}\r\n    </div>\r\n  );\r\n}\r\n// src=\"./\"\r\nexport default Video;\r\n","// import Axios from \"axios\";\nimport Axios from \"./axios\";\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Video from \"./Video\";\n\nfunction App() {\n  const [videos, setVideos] = useState([]);\n\n  useEffect(() => {\n    async function fetchPosts() {\n      const response = await Axios.get(\"/v2/posts\");\n      setVideos(response.data);\n\n      return response;\n    }\n    fetchPosts();\n  }, []);\n\n  console.log(videos);\n  return (\n    // BEM Naming convention\n    <div className=\"app\">\n      <div className=\"app__videos\">\n        {videos.map(\n          ({ url, channel, description, song, likes, messages, shares }) => (\n            <Video\n              url={url}\n              channel={channel}\n              description={description}\n              song={song}\n              messages={messages}\n              likes={likes}\n              shares={shares}\n            />\n          )\n        )}\n      </div>\n\n      {/* app container */}\n      {/* video */}\n      {/* video */}\n      {/* video */}\n      {/* video */}\n      {/* video */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}